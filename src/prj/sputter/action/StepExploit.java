package prj.sputter.action;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;

import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.sun.glass.ui.Application;

import javafx.geometry.Orientation;
import javafx.scene.Node;
import javafx.scene.control.Control;
import javafx.scene.control.Label;
import javafx.scene.control.Separator;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import narl.itrc.Misc;

//實驗用步驟~~~
public class StepExploit extends Bumper {
	
	public static final String action_name = "資料探勘";
	
	public StepExploit() {
		show_mesg(action_name);		
		set(
			shutter_close,			
			op1,
			op2,
			spik_running,
			spik_apply_pulse,
			turn_on,
			turn_on_wait,
			op3,
			turn_off,
			turn_off_wait,
			op4,
			op5
		);
	}

	final Label[] val_cur = {
		//current setting value
		new Label(), 
		new Label(), 
		new Label(),
	};
	final TextField[] box_max = {
		new TextField("200"),//power
		new TextField("200"),//T_on
		new TextField("200"),//T_off
	};
	final TextField[] box_min = {
		new TextField("100"),//power
		new TextField("15"),//T_on
		new TextField("15"),//T_off
	};
	private void show_value(Action pp) {
		val_cur[0].setText(""+pp.power);
		val_cur[1].setText(""+pp.t_on);
		val_cur[2].setText(""+pp.t_off);
	}
	//final DescriptiveStatistics stat_rate = new DescriptiveStatistics();
	
	private static class Action implements Serializable {
		private static final long serialVersionUID = -7071464586801069502L;
		final int power, t_on, t_off;
		Action(int... val){
			power= val[0];
			t_on = val[1];
			t_off= val[2];
		}
		ArrayList<Float> outcome = new ArrayList<Float>();
		float   predict = -1f;
	};
	
	final ArrayList<Action> lst_action = new ArrayList<Action>();
	final ArrayList<Action> lst_result = new ArrayList<Action>();
	Action cur_action;
	
	final Runnable op1 = ()->{
		show_mesg("產生決策");		
		int[] v_max = {0, 0, 0,};//power, T_on, T_off
		int[] v_min = {0, 0, 0,};//power, T_on, T_off
		try {
			for(int i=0; i<v_max.length; i++) {
				v_max[i] = Integer.valueOf(box_max[i].getText());
			}
			for(int i=0; i<v_min.length; i++) {
				v_min[i] = Integer.valueOf(box_min[i].getText());
			}	
		}catch(NumberFormatException e) {
			abort_step();
			return;
		}
		wait_async(()->{
			lst_action.clear();
			lst_result.clear();
			//gen_random_choise(v_min,v_max);
			gen_combine_choise(v_min,v_max);
			notify_async();
		});
	};
	
	final Runnable op2 = ()->{
		show_mesg("決定策略");
		if(lst_action.size()==0) {
			//find the best in result!!!!
			abort_step();
			return;
		}
		
		//select action random or by prediction~~~		
		//choise_random_action();
		choise_sequence_action();
		
		//apply setting for all devices~~~
		dcg_power   = cur_action.power;
		dcg_t_rise  =  5*1000;// 5 sec
		dcg_t_stable= 30*1000;//30 sec
		
		t_on_pos = cur_action.t_on;
		t_off_pos= cur_action.t_off;
		t_on_neg = cur_action.t_on;
		t_off_neg= cur_action.t_off;
		
		show_value(cur_action);
		next_step();
	};
	
	final Runnable waiting = ()->{
		final long total = dcg_t_rise+dcg_t_stable; 
		final long remain= waiting_time(total);
		show_mesg(
			"等待輸出",
			Misc.tick2text(remain,true)+"/"+Misc.tick2text(total ,true),
			String.format("%5.1fV",dcg1.volt.get()),
			String.format("%5.3fA",dcg1.amps.get())
		);
		if(remain>dcg_t_stable) {
			return;			
		}
		
		final int vv = dcg1.volt.getValue().intValue();
		final int aa = spik.ARC_count.get();
		if(vv>=700 || aa>=100) {			
			next_step(this.waiting, turn_off);
			return;
		}
		if(remain==0) {	
			next_step();//start to monitor data~~~~
		}
	};
	
	final Runnable op3 = ()->{
		final long remain= waiting_time("3:00");//wait 3 minute
		final float observe = Math.abs(sqm1.meanRate.get());
		show_mesg(
			"觀察資料("+lst_action.size(),
			Misc.tick2text(remain,true),
			String.format("%5.3f%s", observe, sqm1.unitRate.get())			
		);		
		cur_action.outcome.add(observe);
	};
	
	final Runnable op4 = ()->{		

		double[] meas = Misc.list2double(cur_action.outcome);
		double avg = StatUtils.mean(meas);
		double dev = StatUtils.variance(meas);
		
		final String txt = String.format(
			"%.3f %s, "+
			"%.2f sccm(Ar), %.2f sccm(N2), %.2f sccm(O2),"+
			"%d W, %d us, %d us,",
			avg, sqm1.unitRate.get(),
			coup.SV_FlowAr.get(), coup.SV_FlowN2.get(), coup.SV_FlowO2.get(),
			cur_action.power, cur_action.t_on, cur_action.t_off
		);
		Misc.logv("%s] "+txt, action_name);
			
		show_mesg(
			"評估決策("+lst_action.size(),
			val_cur[0].getText()+"/"+val_cur[1].getText()+"/"+val_cur[2].getText(),
			String.format("AVG:%5.3f%s", avg, sqm1.unitRate.get()),
			String.format("DEV:%5.3f%s", dev)
		);

		if(lst_action.size()==0 || avg>=2.) {
			//we have no choices, just keep the result~~~			
			next_step();
		}else {
			next_step(this.op4,op2);
		}		
	};
	
	final Runnable op5 = ()->{
		show_mesg("匯出資料");
		wait_async(()->{
			Misc.serialize2file(lst_result, "lst_result.obj");
			dump_result(lst_result);
			notify_async();
		});
	};
	
	/*private void gen_random_choise(int[] v_min, int[] v_max) {
		SobolSequenceGenerator gen = new SobolSequenceGenerator(3);
		int total = 1;
		for(int i=0; i<3; i++) {
			total = total * Math.abs(v_max[i]-v_min[i]);
		}
		total = total / 3;
		gen.skipTo((int)(Math.random()*total));
		for(int i=0; i<10; i++) {
			double[] seed = gen.nextVector();
			int[] val = {
				v_min[0]+Math.round((v_max[0]-v_min[0])*(float)seed[0]),
				v_min[1]+Math.round((v_max[1]-v_min[1])*(float)seed[1]),
				v_min[2]+Math.round((v_max[2]-v_min[2])*(float)seed[2]),
			};
			lst_action.add(new Action(val));
		}
	}
	private void choise_random_action() {
		final int size = lst_action.size();
		if(size==0) { return; }
		final int idx = new Random().nextInt(size);
		cur_action = lst_action.remove(idx);
		lst_result.add(cur_action);
	}*/

	private int[] sample_value(int min, int max) {
		final int[] val = new int[3];
		final int stp = Math.abs(max - min)/(val.length+1);
		for(int i=0; i<val.length; i++) {
			val[i] = min + (i+1) * stp;
		}
		return val;
	}
	private boolean increase_one(final int[] len, int[] idx, int i) {
		if(i>=idx.length) {
			return false;
		}
		idx[i]+=1;
		if(idx[i]<len[i]) {
			return true;
		}else {
			idx[i] = 0;
		}
		return increase_one(len,idx,i+1);		
	}
	private void combination(
		final int[][] val,
		final int[] len,
		int[] idx
	) {
		int[] cmb = new int[val.length];
		for(int i=0; i<cmb.length; i++) {
			cmb[i] = val[i][idx[i]];
		}
		lst_action.add(new Action(cmb));
		if(increase_one(len, idx, 0)==false) {
			return;
		}		
		combination(val, len, idx);
	}
	private void gen_combine_choise(int[] v_min, int[] v_max) {
		int[][] val = new int[3][];
		for(int i=0; i<val.length; i++) {
			val[i] = sample_value(v_min[i],v_max[i]);
		}
		combination(
			val, 
			new int[] {val[0].length,val[1].length,val[2].length}, 
			new int[] {0,0,0}
		);
		return;//check point~~~
	}
	private void choise_sequence_action() {
		final int size = lst_action.size();
		if(size==0) { return; }
		cur_action = lst_action.remove(0);
		lst_result.add(cur_action);
	}
	
	private void dump_result(final ArrayList<Action> lst) {		
		try {
			Workbook wb = new XSSFWorkbook();
			final String name = String.format(
				"Ar:%5.2f, N2:%5.2f, O2:%5.2f,",
				coup.SV_FlowAr.get(),coup.SV_FlowN2.get(),coup.SV_FlowO2.get()
			);
			Sheet sh = wb.createSheet(name);
			Row rr;
			rr = sh.createRow(0);
			rr.createCell(0,CellType.STRING).setCellValue("predict");
			rr.createCell(1,CellType.STRING).setCellValue("avg");
			rr.createCell(2,CellType.STRING).setCellValue("dev");
			rr.createCell(3,CellType.STRING).setCellValue("min");
			rr.createCell(4,CellType.STRING).setCellValue("mod");
			rr.createCell(5,CellType.STRING).setCellValue("max");
			rr.createCell(6,CellType.STRING).setCellValue("power");
			rr.createCell(7,CellType.STRING).setCellValue("t_on");
			rr.createCell(8,CellType.STRING).setCellValue("t_off");
			for(Action act:lst){				
				final int row = sh.getLastRowNum() + 1;
				rr = sh.createRow(row);
				rr.createCell(0,CellType.NUMERIC).setCellValue(act.predict);
				if(act.outcome.size()==0) {
					rr.createCell(1,CellType.NUMERIC).setCellValue(0.);
					rr.createCell(2,CellType.NUMERIC).setCellValue(0.);
					rr.createCell(3,CellType.NUMERIC).setCellValue(0.);
					rr.createCell(4,CellType.NUMERIC).setCellValue(0.);
					rr.createCell(5,CellType.NUMERIC).setCellValue(0.);
				}else {
					double[] vals = Misc.list2double(act.outcome);
					rr.createCell(1,CellType.NUMERIC).setCellValue(StatUtils.mean(vals));
					rr.createCell(2,CellType.NUMERIC).setCellValue(StatUtils.variance(vals));
					rr.createCell(3,CellType.NUMERIC).setCellValue(StatUtils.min(vals));
					rr.createCell(4,CellType.NUMERIC).setCellValue(StatUtils.mode(vals)[0]);
					rr.createCell(5,CellType.NUMERIC).setCellValue(StatUtils.max(vals));					
				}
				rr.createCell(6).setCellValue(act.power);
				rr.createCell(7).setCellValue(act.t_on);
				rr.createCell(8).setCellValue(act.t_off);
				if(Application.isEventThread()==false) {
					Application.invokeLater(()->show_mesg("匯出資料","("+row));
				}else {
					show_mesg("匯出資料","("+row);
				}
			}
			wb.write(new FileOutputStream(String.format(
				"%s.xlsx",
				action_name
			)));
			wb.close();
		} catch (IOException e) {			
			Misc.loge(e.getMessage());
		}
	}
	
	@Override
	public Node getContent() {
		Control[] lst = {
			box_max[0],box_max[1],box_max[2],
			val_cur[0],val_cur[1],val_cur[2],
			box_min[0],box_min[1],box_min[2],
		};
		for(Control cc:lst){
			cc.setMaxWidth(80);
		}
		final GridPane lay = new GridPane();
		lay.getStyleClass().addAll("box-pad","font-console");
		lay.addColumn(0, msg);
		lay.add(new Separator(Orientation.VERTICAL), 1, 0, 1, 4);
		lay.addColumn(2,
			new Label(),
			new Label("最大"),
			new Label("設定"),
			new Label("最小")
		);
		lay.addRow(0, new Label("功率"),new Label("Ton"),new Label("Toff"));
		lay.addRow(1, box_max);
		lay.addRow(2, val_cur);
		lay.addRow(3, box_min);
		return lay;
	}
	@Override
	public void eventEdit() {
	}
	@Override
	public String flatten() {
		return "";
	}
	@Override
	public void expand(String txt) {
	}
}
