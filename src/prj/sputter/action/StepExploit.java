package prj.sputter.action;

import java.io.Serializable;
import java.util.ArrayDeque;
import java.util.ArrayList;

import org.apache.commons.math3.random.RandomVectorGenerator;
import org.apache.commons.math3.random.SobolSequenceGenerator;
import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

import javafx.geometry.Orientation;
import javafx.scene.Node;
import javafx.scene.control.Control;
import javafx.scene.control.Label;
import javafx.scene.control.Separator;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import narl.itrc.Misc;

//實驗用步驟~~~
public class StepExploit extends Bumper {
	
	public static final String action_name = "資料探勘";
	
	public StepExploit() {
		//set_mesg(action_name);
		set(
			close_shutter,
			//spik_running,
			spik_get_pulse,			
			op1,
			op2,			
			spik_apply_pulse,
			//turn_on,
			//op3,
			//turn_off,
			op4
		);
	}

	final Label[] inf = {
		//title and information
		new Label(), 
		new Label(), 
		new Label(),
		new Label(),
	};
	
	final Label[] val_cur = {
		//current setting value
		new Label(), 
		new Label(), 
		new Label(),
	};
	final TextField[] box_max = {
		new TextField("300"),//power
		new TextField("50"),//T_on
		new TextField("50"),//T_off
	};
	final TextField[] box_min = {
		new TextField("100"),//power
		new TextField("13"),//T_on
		new TextField("25"),//T_off
	};
	private void show_value(Choice pp) {
		val_cur[0].setText(""+pp.power);
		val_cur[1].setText(""+pp.t_on);
		val_cur[2].setText(""+pp.t_off);
	}
	//final DescriptiveStatistics stat_rate = new DescriptiveStatistics();
	
	class Choice implements Serializable {
		private static final long serialVersionUID = -7071464586801069502L;
		
		final int power, t_on, t_off;
		Choice(int... val){
			power= val[0];
			t_on = val[1];
			t_off= val[2];
		}
		ArrayList<Float> rate_measure = new ArrayList<Float>();
		float   rate_predict = -1f;
	};
	
	final ArrayList<Choice> lst_choice = new ArrayList<Choice>();
	
	final ArrayList<Choice> lst_result = new ArrayList<Choice>();
	
	Choice cur_policy;
	
	final Runnable op1 = ()->{
		set_mesg("產生決策");
		lst_choice.clear();
		lst_result.clear();
		int[] v_max = {0, 0, 0,};//power, T_on, T_off
		int[] v_min = {0, 0, 0,};//power, T_on, T_off
		try {
			for(int i=0; i<v_max.length; i++) {
				v_max[i] = Integer.valueOf(box_max[i].getText());
			}
			for(int i=0; i<v_min.length; i++) {
				v_min[i] = Integer.valueOf(box_min[i].getText());
			}	
		}catch(NumberFormatException e) {
			abort_step();
			return;
		}
		wait_async(()->{
			SobolSequenceGenerator gen = new SobolSequenceGenerator(3);
			/*int total = 
				Math.abs(v_max[0]-v_min[0]+1) * 
				Math.abs(v_max[1]-v_min[1]+1) * 
				Math.abs(v_max[2]-v_min[2]+1);
			total = total / 3;*/
			gen.skipTo(1000);
			for(int i=0; i<10; i++) {
				double[] seed = gen.nextVector();
				
				int[] val = {
					v_min[0]+Math.round((v_max[0]-v_min[0])*(float)seed[0]),
					v_min[1]+Math.round((v_max[1]-v_min[1])*(float)seed[1]),
					v_min[2]+Math.round((v_max[2]-v_min[2])*(float)seed[2]),
				};
				lst_choice.add(new Choice(val));
			}
			notify_async();
		});
	};
	
	final Runnable op2 = ()->{
		set_mesg("決定策略");
		if(lst_choice.size()==0) {
			//find the best in result!!!!
			abort_step();
			return;
		}
		//select choice by prediction~~~~		
		int idx = 0;
		float max_rate = 0f;
		for(int i=0; i<lst_choice.size(); i++) {
			if(lst_choice.get(i).rate_predict > max_rate) {
				idx = i;
			} 
		}
		cur_policy= lst_choice.remove(idx);		
		dcg_power= cur_policy.power;
		t_on_pos = cur_policy.t_on;
		t_off_pos= cur_policy.t_off;
		t_on_neg = cur_policy.t_on;
		t_off_neg= cur_policy.t_off;
		show_value(cur_policy);
		next_step();
	};
	
	final Runnable op3 = ()->{
		final float rate = sqm1.meanRate.get();		
		set_mesg(
			"收集資料",
			String.format("%.2f%s",rate,sqm1.unitRate.get())
		);		
		cur_policy.rate_measure.add(rate);
		waiting_time("3:00");//wait 3 minute
	};
	
	final Runnable op4 = ()->{		
		DescriptiveStatistics stats = new DescriptiveStatistics(
			Misc.list2double(cur_policy.rate_measure)
		);		
		lst_result.add(cur_policy);
		double dev = stats.getStandardDeviation();
		if(dev==Double.NaN){
			dev = -1.;
		}
		set_mesg(
			"評估決策",
			String.format("AVG:%.2f%s", stats.getMean(), sqm1.unitRate),
			String.format("DEV:%.2f", dev),
			"",
			val_cur[0].getText()+" "+val_cur[1].getText()+" "+val_cur[2].getText()
		);			
		//if(stats.getMean()>=1.5) {
			//ya~~~, we meet the goal!!!!!
		//	next_step();
		//	return;
		//}
		//TODO: how to guess the best choice!!!
		
		next_step(this.op4,op2);
	};
	
	@Override
	public Node getContent() {
		Control[] lst = {
			box_max[0],box_max[1],box_max[2],
			val_cur[0],val_cur[1],val_cur[2],
			box_min[0],box_min[1],box_min[2],
		};
		for(Control cc:lst){
			cc.setMaxWidth(80);
		}
		final GridPane lay = new GridPane();
		lay.getStyleClass().addAll("box-pad","font-console");
		lay.addColumn(0, inf);
		lay.add(new Separator(Orientation.VERTICAL), 1, 0, 1, 4);
		lay.addColumn(2,
			new Label(),
			new Label("最大"),
			new Label("設定"),
			new Label("最小")
		);
		lay.addRow(0, new Label("功率"),new Label("Ton"),new Label("Toff"));
		lay.addRow(1, box_max);
		lay.addRow(2, val_cur);
		lay.addRow(3, box_min);
		return lay;
	}
	@Override
	public void eventEdit() {
	}
	@Override
	public String flatten() {
		return "";
	}
	@Override
	public void expand(String txt) {
	}
}
