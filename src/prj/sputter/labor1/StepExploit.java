package prj.sputter.labor1;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Map;
import java.util.Scanner;

import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;

import javafx.geometry.Orientation;
import javafx.scene.Node;
import javafx.scene.control.Control;
import javafx.scene.control.Label;
import javafx.scene.control.Separator;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import narl.itrc.Gawain;
import narl.itrc.Misc;

//實驗用步驟~~~
public class StepExploit extends StepCommon {
	
	public static final String action_name = "探勘參數";
	
	public StepExploit() {
		show_mesg(action_name);
		hook_turn_on_wait = hooker;//override this hook~~~
		set(
			op_launch,
		    shutter_close,
		    spik_running, run_waiting(3000,msg[2]),
		    op_apply_param,
			spik_apply_pulse, run_waiting(3000,msg[2]),
			turn_on_dummy, turn_on_wait_dummy,
			op_stats,
			turn_off_dummy,turn_off_wait_dummy,
		    op_give_answer
		);
	}

	final Label[] txt_cur = {
		//current setting value
		new Label(), 
		new Label(), 
		new Label(),
	};
	final TextField[] box_max = {
		new TextField("400"),//power
		new TextField("100"),//T_on
		new TextField("100"),//T_off
	};
	final TextField[] box_min = {
		new TextField("100"),//power
		new TextField("15"),//T_on
		new TextField("15"),//T_off
	};
	
	Process proc;
	Scanner proc_ss;
	PrintWriter proc_pp;
	
	int exp_count;
	
	final Runnable op_launch = ()->{
		final String[] argv = {
			Gawain.prop().getProperty("PYTHON",""),
			"adjust.py",
			box_min[0].getText()+"-"+box_max[0].getText(),
			box_min[1].getText()+"-"+box_max[1].getText(),
			box_min[2].getText()+"-"+box_max[2].getText(),
		};
		if(argv[0].length()==0) {
			show_mesg("內部錯誤","No PYTHON");
			abort_step();
			return;
		}
		try {
			//arguments as range~~~~
			proc = new ProcessBuilder(argv)
				.directory(Gawain.getSockFile())
				.start();
			proc_pp = new PrintWriter(proc.getOutputStream());
			proc_ss = new Scanner(proc.getInputStream());
			exp_count = 1;//re-count
			next_step();
		} catch (IOException e) {
			show_mesg("內部錯誤","exec fail!!");
			abort_step();
		}
	};
	
	final DescriptiveStatistics stats = new DescriptiveStatistics();

	final Runnable op_apply_param = ()->{
		if(proc.isAlive()==false) {						
			final String param = proc_ss.nextLine();
			update_param(param);	
			final String bestv = proc_ss.nextLine();		
			show_mesg("最佳結果","best:"+bestv);
			Misc.logv("[OPTUNA.0] %s -> %s", param, bestv);
			proc_ss.close();
			proc_pp.close();
			next_step(9);
			return;
		}
		if(proc_ss.hasNext()==false){
			Misc.loge("[OPTUNA.3] Fail to scan!!!");			
			proc_ss.close();
			proc_pp.close();
			next_step(9);
			return;
		}
		stats.clear();
		final String param = proc_ss.nextLine();
		update_param(param);
		Misc.logv("[OPTUNA.1] %s", param);
		show_mesg("更新參數("+exp_count+")");
		next_step();
	};
	
	final Runnable hooker = ()->{
		final int vv = dcg1.volt.getValue().intValue();
		final int aa = spik.ARC_count.get();
		if(vv<700 && aa<500) {			
			return;
		}
		show_mesg("點火失敗","電壓:"+vv,"電弧:"+aa);
		proc_pp.println("-1.0");
		proc_pp.flush();
		Misc.logv("[OPTUNA.2]%03d) ARC!!", exp_count);
		next_step(this.turn_on_wait, this.op_apply_param);
		exp_count+=1;
	};
	
	final Runnable op_stats = ()->{
		final long remain= waiting_time("5");//waiting to observe~~~		
		final float observe = Math.abs(sqm1.meanRate.get());
		//final float observe = (float) Math.random();
		
		final String avg = String.format("%5.3f", stats.getMean());
		final double sig = stats.getStandardDeviation();
		show_mesg(
			"統計資料("+exp_count+")",
			String.format("AVG:%s", avg),
			(Double.isNaN(sig))?(""):(String.format("DEV:%5.3f", sig)),
			Misc.tick2text(remain,true)						
		);	
		stats.addValue(observe);
	};
	
	final Runnable op_give_answer = ()->{
		final String txt = String.format("%5.3f", stats.getMean());
		Misc.logv("[OPTUNA.2]%03d) meas=%s", exp_count, txt);
		proc_pp.println(txt);
		proc_pp.flush();
		next_step(this.op_give_answer, this.op_apply_param);
		exp_count+=1;
	};
	
	private void update_param(final String txt) {
		Map<String,String> map = Misc.txt2dict(txt);
		final String pow  = map.get("pow");
		final String t_on = map.get("t_on");
		final String t_off= map.get("t_off");
		txt_cur[0].setText(pow);
		txt_cur[1].setText(t_on);
		txt_cur[2].setText(t_off);
		final int v_pow= Float.valueOf(pow).intValue();
		final int v_on = Float.valueOf(t_on).intValue();
		final int v_off= Float.valueOf(t_off).intValue();
		dcg_power = v_pow;
		dcg_t_rise  = 10*1000;//ramp time
		dcg_t_stable= 30*1000;//hold(stable) time
		t_on_pos = t_on_neg= v_on;
		t_off_pos=t_off_neg= v_off;	
		off_volt = 200;
	}
	
	@Override
	public Node getContent() {
		Control[] lst = {
			box_max[0],box_max[1],box_max[2],
			txt_cur[0],txt_cur[1],txt_cur[2],
			box_min[0],box_min[1],box_min[2],
		};
		for(Control cc:lst){
			cc.setMaxWidth(80);
		}
		final GridPane lay = new GridPane();
		lay.getStyleClass().addAll("box-pad","font-console");
		lay.addColumn(0, msg);
		lay.add(new Separator(Orientation.VERTICAL), 1, 0, 1, 4);
		lay.addColumn(2,
			new Label(),
			new Label("最大"),
			new Label("設定"),
			new Label("最小")
		);
		lay.addRow(0, new Label("功率"),new Label("Ton"),new Label("Toff"));
		lay.addRow(1, box_max);
		lay.addRow(2, txt_cur);
		lay.addRow(3, box_min);
		return lay;
	}
	@Override
	public void eventEdit() {
	}
	@Override
	public String flatten() {
		return "";
	}
	@Override
	public void expand(String txt) {
	}
}
